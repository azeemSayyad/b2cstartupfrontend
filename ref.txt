To merge a feature branch into the main branch (e.g., "main" or "master") and then delete the feature branch, you can follow these steps using Git. In this example, we'll assume you have a feature branch called "feature-branch":

1. **Checkout the Main Branch**:
   - Start by switching to the main branch where you want to merge your feature branch into. Typically, this is the "main" branch.

   ```bash
   git checkout main
   ```

2. **Merge the Feature Branch**:
   - Use the `git merge` command to merge your feature branch into the main branch. Replace "feature-branch" with the name of your feature branch.

   ```bash
   git merge feature-branch
   ```

   This command will merge the changes from the feature branch into the main branch.

3. **Delete the Feature Branch**:
   - Once the merge is complete, you can delete the feature branch using the `-d` option with `git branch`. This is safe to do because the changes have already been merged into the main branch.

   ```bash
   git branch -d feature-branch
   ```

   If you encounter an error when using `-d`, it means that Git believes there are unmerged changes in the feature branch. You can force-delete the branch using the `-D` option, but use this with caution:

   ```bash
   git branch -D feature-branch
   ```

   Using `-D` will forcefully delete the branch, even if there are unmerged changes. Make sure you're certain that you don't need the branch anymore.

4. **Push the Changes** (if using a remote repository):
   - If you're working with a remote repository (e.g., on GitHub), you'll also want to push the changes to the remote repository to reflect the merge and deletion of the feature branch:

   ```bash
   git push origin main
   ```

   This will update the remote main branch with the merged changes.

By following these steps, you will merge your feature branch into the main branch, delete the feature branch (if it's no longer needed), and ensure that the changes are reflected in the main branch of both your local and remote repositories.